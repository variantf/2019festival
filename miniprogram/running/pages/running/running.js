"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var app = getApp();
var host1_1 = require("./host1");
var host2_1 = require("./host2");
var host3_1 = require("./host3");
var host4_1 = require("./host4");
var host5_1 = require("./host5");
var host6_1 = require("./host6");
var host7_1 = require("./host7");
var host8_1 = require("./host8");
var HOSTS = [
    host1_1.HOST_1, host2_1.HOST_2, host3_1.HOST_3, host4_1.HOST_4,
    host5_1.HOST_5, host6_1.HOST_6, host7_1.HOST_7, host8_1.HOST_8
];
Page({
    onShow: function () {
        app.sound("start");
        this.setData({
            bgmPlaying: !app.bgmPaused()
        });
    },
    toggleBGM: function () {
        this.setData({
            bgmPlaying: !this.data.bgmPlaying
        });
        app.toggleBGM();
    },
    data: {
        sid: '',
        pid: '',
        questionNumber: 0,
        questionContent: "",
        choiceA: "",
        choiceB: "",
        lastChoice: '',
        lastChoiceStatus: 'unknown',
        LOTTERY_CORRECT_COUNT: 3,
        HOST_SRC: '',
        bgmPlaying: true
    },
    nextQuestionPending: false,
    nextQuestion: function (evt) {
        if (this.nextQuestionPending) {
            return;
        }
        var choice = evt.currentTarget.id;
        var page = this;
        this.nextQuestionPending = true;
        this.setData({ lastChoice: choice });
        wx.request({
            method: "POST",
            url: app.API_ENDPOINT + ("/session/" + this.data.sid + "/problem/" + this.data.pid),
            data: {
                ans: choice
            },
            header: {
                'X-User-Token': app.globalData.token
            },
            success: app.handleRequstFinish(function (res) {
                var session = res.data;
                if (session.status == 'done') {
                    app.sound("failed");
                    page.setData({ lastChoiceStatus: 'error' });
                    setTimeout(function () {
                        page.nextQuestionPending = false;
                        if (session.correct_count >= page.data.LOTTERY_CORRECT_COUNT) {
                            wx.redirectTo({
                                url: "/info-pages/pages/success/success?correct_count=" + session.correct_count + "&session_id=" + session.id,
                            });
                        }
                        else {
                            wx.redirectTo({
                                url: '/info-pages/pages/failure/failure'
                            });
                        }
                    }, 500);
                }
                else {
                    app.sound("correct");
                    page.setData({ lastChoiceStatus: 'correct' });
                    setTimeout(function () {
                        page.nextQuestionPending = false;
                        page.setData({
                            pid: session.problem.id,
                            questionContent: session.problem.body,
                            questionNumber: session.problem.idx,
                            choiceA: session.problem.A,
                            choiceB: session.problem.B,
                            lastChoiceStatus: 'unknown'
                        });
                    }, 500);
                }
            }),
            fail: function (res) {
                page.nextQuestionPending = false;
                app.handleRequestFail(res);
            }
        });
    },
    onLoad: function () {
        this.setData({
            HOST_SRC: "data:image/png;base64," + HOSTS[Math.floor(Math.random() * 8)]
        });
        var self = this;
        wx.request({
            url: app.API_ENDPOINT + "/session",
            method: "POST",
            header: {
                'X-User-Token': app.globalData.token
            },
            success: app.handleRequstFinish(function (res) {
                var session = res.data;
                self.setData({
                    sid: session.id,
                    pid: session.problem.id,
                    questionContent: session.problem.body,
                    questionNumber: session.problem.idx,
                    choiceA: session.problem.A,
                    choiceB: session.problem.B
                });
            }),
            fail: app.handleRequestFail
        });
    }
});
//# sourceMappingURL=data:application/json;base64,