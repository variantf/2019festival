"use strict";
var app = getApp();
Page({
    data: {
        sid: '',
        pid: '',
        questionNumber: 0,
        questionContent: "截止到2018年末，我国农村贫困人口减少到1660万人。2019年12月19日，全国扶贫开发工作会议总结2019年脱贫攻坚工作，预计2019年减少贫困人口1000万人以上。",
        choiceA: "",
        choiceB: "",
        lastChoice: '',
        lastChoiceStatus: 'unknown',
        LOTTERY_CORRECT_COUNT: 3
    },
    nextQuestionPending: false,
    nextQuestion: function (evt) {
        if (this.nextQuestionPending) {
            return;
        }
        var choice = evt.currentTarget.id;
        var page = this;
        this.nextQuestionPending = true;
        this.setData({ lastChoice: choice });
        wx.request({
            method: "POST",
            url: app.API_ENDPOINT + ("/session/" + this.data.sid + "/problem/" + this.data.pid),
            data: {
                ans: choice
            },
            header: {
                'X-User-Token': app.globalData.token
            },
            success: app.handleRequstFinish(function (res) {
                var session = res.data;
                if (session.status == 'done') {
                    page.setData({ lastChoiceStatus: 'error' });
                    setTimeout(function () {
                        page.nextQuestionPending = false;
                        if (session.correct_count >= page.data.LOTTERY_CORRECT_COUNT) {
                            wx.redirectTo({
                                url: "../success/success?correct_count=" + session.correct_count,
                            });
                        }
                        else {
                            wx.redirectTo({
                                url: '../failure/failure'
                            });
                        }
                    }, 500);
                }
                else {
                    page.setData({ lastChoiceStatus: 'correct' });
                    setTimeout(function () {
                        page.nextQuestionPending = false;
                        page.setData({
                            pid: session.problem.id,
                            questionContent: session.problem.body,
                            questionNumber: session.problem.idx,
                            choiceA: session.problem.A,
                            choiceB: session.problem.B,
                            lastChoiceStatus: 'unknown'
                        });
                    }, 500);
                }
            }),
            fail: function (res) {
                page.nextQuestionPending = false;
                app.handleRequestFail(res);
            }
        });
    },
    onLoad: function () {
        var self = this;
        wx.request({
            url: app.API_ENDPOINT + "/session",
            method: "POST",
            header: {
                'X-User-Token': app.globalData.token
            },
            success: app.handleRequstFinish(function (res) {
                var session = res.data;
                self.setData({
                    sid: session.id,
                    pid: session.problem.id,
                    questionContent: session.problem.body,
                    questionNumber: session.problem.idx,
                    choiceA: session.problem.A,
                    choiceB: session.problem.B
                });
            }),
            fail: app.handleRequestFail
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVubmluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJ1bm5pbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUksR0FBRyxHQUFHLE1BQU0sRUFBYyxDQUFBO0FBRTlCLElBQUksQ0FBQztJQUNILElBQUksRUFBRTtRQUNKLEdBQUcsRUFBRSxFQUFFO1FBQ1AsR0FBRyxFQUFFLEVBQUU7UUFDUCxjQUFjLEVBQUMsQ0FBQztRQUNoQixlQUFlLEVBQUMsd0ZBQXdGO1FBQ3hHLE9BQU8sRUFBQyxFQUFFO1FBQ1YsT0FBTyxFQUFDLEVBQUU7UUFDVixVQUFVLEVBQUUsRUFBRTtRQUNkLGdCQUFnQixFQUFFLFNBQVM7UUFDM0IscUJBQXFCLEVBQUUsQ0FBQztLQUN6QjtJQUNELG1CQUFtQixFQUFFLEtBQUs7SUFDMUIsWUFBWSxFQUFFLFVBQVUsR0FBUTtRQUM5QixJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUMxQixPQUFPO1NBQ1Y7UUFDRCxJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztRQUNsQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQztRQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDckMsRUFBRSxDQUFDLE9BQU8sQ0FBQztZQUNQLE1BQU0sRUFBRSxNQUFNO1lBQ2QsR0FBRyxFQUFFLEdBQUcsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ25GLElBQUksRUFBRTtnQkFDRixHQUFHLEVBQUUsTUFBTTthQUNkO1lBQ0QsTUFBTSxFQUFFO2dCQUNKLGNBQWMsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUs7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cCA9IGdldEFwcDxJQXBwT3B0aW9uPigpXG5cblBhZ2Uoe1xuICBkYXRhOiB7XG4gICAgc2lkOiAnJyxcbiAgICBwaWQ6ICcnLFxuICAgIHF1ZXN0aW9uTnVtYmVyOjAsXG4gICAgcXVlc3Rpb25Db250ZW50Olwi5oiq5q2i5YiwMjAxOOW5tOacq++8jOaIkeWbveWGnOadkei0q+WbsOS6uuWPo+WHj+WwkeWIsDE2NjDkuIfkurrjgIIyMDE55bm0MTLmnIgxOeaXpe+8jOWFqOWbveaJtui0q+W8gOWPkeW3peS9nOS8muiuruaAu+e7kzIwMTnlubTohLHotKvmlLvlnZrlt6XkvZzvvIzpooTorqEyMDE55bm05YeP5bCR6LSr5Zuw5Lq65Y+jMTAwMOS4h+S6uuS7peS4iuOAglwiLFxuICAgIGNob2ljZUE6XCJcIixcbiAgICBjaG9pY2VCOlwiXCIsXG4gICAgbGFzdENob2ljZTogJycsXG4gICAgbGFzdENob2ljZVN0YXR1czogJ3Vua25vd24nLFxuICAgIExPVFRFUllfQ09SUkVDVF9DT1VOVDogM1xuICB9LFxuICBuZXh0UXVlc3Rpb25QZW5kaW5nOiBmYWxzZSxcbiAgbmV4dFF1ZXN0aW9uOiBmdW5jdGlvbiAoZXZ0OiBhbnkpIHtcbiAgICBpZiAodGhpcy5uZXh0UXVlc3Rpb25QZW5kaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGNob2ljZSA9IGV2dC5jdXJyZW50VGFyZ2V0LmlkO1xuICAgIHZhciBwYWdlID0gdGhpcztcbiAgICB0aGlzLm5leHRRdWVzdGlvblBlbmRpbmcgPSB0cnVlO1xuICAgIHRoaXMuc2V0RGF0YSh7IGxhc3RDaG9pY2U6IGNob2ljZSB9KTtcbiAgICB3eC5yZXF1ZXN0KHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgdXJsOiBhcHAuQVBJX0VORFBPSU5UICsgKFwiL3Nlc3Npb24vXCIgKyB0aGlzLmRhdGEuc2lkICsgXCIvcHJvYmxlbS9cIiArIHRoaXMuZGF0YS5waWQpLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBhbnM6IGNob2ljZVxuICAgICAgICB9LFxuICAgICAgICBoZWFkZXI6IHtcbiAgICAgICAgICAgICdYLVVzZXItVG9rZW4nOiBhcHAuZ2xvYmFsRGF0YS50b2tlblxuICAgICAgICB9LFxuICAgICAgICBzdWNjZXNzOiBhcHAuaGFuZGxlUmVxdXN0RmluaXNoKGZ1bmN0aW9uIChyZXM6IGFueSkge1xuICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IHJlcy5kYXRhO1xuICAgICAgICAgICAgaWYgKHNlc3Npb24uc3RhdHVzID09ICdkb25lJykge1xuICAgICAgICAgICAgICAgIHBhZ2Uuc2V0RGF0YSh7IGxhc3RDaG9pY2VTdGF0dXM6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2UubmV4dFF1ZXN0aW9uUGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbi5jb3JyZWN0X2NvdW50ID49IHBhZ2UuZGF0YS5MT1RURVJZX0NPUlJFQ1RfQ09VTlQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB3eC5yZWRpcmVjdFRvKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYC4uL3N1Y2Nlc3Mvc3VjY2Vzcz9jb3JyZWN0X2NvdW50PSR7c2Vzc2lvbi5jb3JyZWN0X2NvdW50fWAsXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgd3gucmVkaXJlY3RUbyh7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICcuLi9mYWlsdXJlL2ZhaWx1cmUnXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFnZS5zZXREYXRhKHsgbGFzdENob2ljZVN0YXR1czogJ2NvcnJlY3QnIH0pO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBwYWdlLm5leHRRdWVzdGlvblBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcGFnZS5zZXREYXRhKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpZDogc2Vzc2lvbi5wcm9ibGVtLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25Db250ZW50OiBzZXNzaW9uLnByb2JsZW0uYm9keSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uTnVtYmVyOiBzZXNzaW9uLnByb2JsZW0uaWR4LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hvaWNlQTogc2Vzc2lvbi5wcm9ibGVtLkEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaG9pY2VCOiBzZXNzaW9uLnByb2JsZW0uQixcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RDaG9pY2VTdGF0dXM6ICd1bmtub3duJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgZmFpbDogZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgcGFnZS5uZXh0UXVlc3Rpb25QZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBhcHAuaGFuZGxlUmVxdWVzdEZhaWwocmVzKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG9uTG9hZCgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICB3eC5yZXF1ZXN0KHtcbiAgICAgIHVybDogYXBwLkFQSV9FTkRQT0lOVCArIFwiL3Nlc3Npb25cIixcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXI6IHtcbiAgICAgICAgJ1gtVXNlci1Ub2tlbic6IGFwcC5nbG9iYWxEYXRhLnRva2VuXG4gICAgICB9LFxuICAgICAgc3VjY2VzczogYXBwLmhhbmRsZVJlcXVzdEZpbmlzaCgocmVzOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IHJlcy5kYXRhO1xuICAgICAgICBzZWxmLnNldERhdGEoe1xuICAgICAgICAgIHNpZDogc2Vzc2lvbi5pZCxcbiAgICAgICAgICBwaWQ6IHNlc3Npb24ucHJvYmxlbS5pZCxcbiAgICAgICAgICBxdWVzdGlvbkNvbnRlbnQ6IHNlc3Npb24ucHJvYmxlbS5ib2R5LFxuICAgICAgICAgIHF1ZXN0aW9uTnVtYmVyOiBzZXNzaW9uLnByb2JsZW0uaWR4LFxuICAgICAgICAgIGNob2ljZUE6IHNlc3Npb24ucHJvYmxlbS5BLFxuICAgICAgICAgIGNob2ljZUI6IHNlc3Npb24ucHJvYmxlbS5CXG4gICAgICAgIH0pXG4gICAgICB9KSxcbiAgICAgIGZhaWw6IGFwcC5oYW5kbGVSZXF1ZXN0RmFpbFxuICAgIH0pXG4gIH1cbn0pXG4iXX0=