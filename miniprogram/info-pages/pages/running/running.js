"use strict";
var app = getApp();
Page({
    onShow: function () {
        app.sound("start");
    },
    data: {
        sid: '',
        pid: '',
        questionNumber: 0,
        questionContent: "",
        choiceA: "",
        choiceB: "",
        lastChoice: '',
        lastChoiceStatus: 'unknown',
        LOTTERY_CORRECT_COUNT: 3
    },
    nextQuestionPending: false,
    nextQuestion: function (evt) {
        if (this.nextQuestionPending) {
            return;
        }
        var choice = evt.currentTarget.id;
        var page = this;
        this.nextQuestionPending = true;
        this.setData({ lastChoice: choice });
        wx.request({
            method: "POST",
            url: app.API_ENDPOINT + ("/session/" + this.data.sid + "/problem/" + this.data.pid),
            data: {
                ans: choice
            },
            header: {
                'X-User-Token': app.globalData.token
            },
            success: app.handleRequstFinish(function (res) {
                var session = res.data;
                if (session.status == 'done') {
                    app.sound("failed");
                    page.setData({ lastChoiceStatus: 'error' });
                    setTimeout(function () {
                        page.nextQuestionPending = false;
                        if (session.correct_count >= page.data.LOTTERY_CORRECT_COUNT) {
                            wx.redirectTo({
                                url: "../success/success?correct_count=" + session.correct_count + "&session_id=" + session.id,
                            });
                        }
                        else {
                            wx.redirectTo({
                                url: '../failure/failure'
                            });
                        }
                    }, 500);
                }
                else {
                    app.sound("correct");
                    page.setData({ lastChoiceStatus: 'correct' });
                    setTimeout(function () {
                        page.nextQuestionPending = false;
                        page.setData({
                            pid: session.problem.id,
                            questionContent: session.problem.body,
                            questionNumber: session.problem.idx,
                            choiceA: session.problem.A,
                            choiceB: session.problem.B,
                            lastChoiceStatus: 'unknown'
                        });
                    }, 500);
                }
            }),
            fail: function (res) {
                page.nextQuestionPending = false;
                app.handleRequestFail(res);
            }
        });
    },
    onLoad: function () {
        var self = this;
        wx.request({
            url: app.API_ENDPOINT + "/session",
            method: "POST",
            header: {
                'X-User-Token': app.globalData.token
            },
            success: app.handleRequstFinish(function (res) {
                var session = res.data;
                self.setData({
                    sid: session.id,
                    pid: session.problem.id,
                    questionContent: session.problem.body,
                    questionNumber: session.problem.idx,
                    choiceA: session.problem.A,
                    choiceB: session.problem.B
                });
            }),
            fail: app.handleRequestFail
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVubmluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJ1bm5pbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUksR0FBRyxHQUFHLE1BQU0sRUFBYyxDQUFDO0FBRS9CLElBQUksQ0FBQztJQUNILE1BQU07UUFDSixHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFDRCxJQUFJLEVBQUU7UUFDSixHQUFHLEVBQUUsRUFBRTtRQUNQLEdBQUcsRUFBRSxFQUFFO1FBQ1AsY0FBYyxFQUFDLENBQUM7UUFDaEIsZUFBZSxFQUFDLEVBQUU7UUFDbEIsT0FBTyxFQUFDLEVBQUU7UUFDVixPQUFPLEVBQUMsRUFBRTtRQUNWLFVBQVUsRUFBRSxFQUFFO1FBQ2QsZ0JBQWdCLEVBQUUsU0FBUztRQUMzQixxQkFBcUIsRUFBRSxDQUFDO0tBQ3pCO0lBQ0QsbUJBQW1CLEVBQUUsS0FBSztJQUMxQixZQUFZLEVBQUUsVUFBVSxHQUFRO1FBQzlCLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQzFCLE9BQU87U0FDVjtRQUNELElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBQ2xDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNyQyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ1AsTUFBTSxFQUFFLE1BQU07WUFDZCxHQUFHLEVBQUUsR0FBRyxDQUFDLFlBQVksR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDbkYsSUFBSSxFQUFFO2dCQUNGLEdBQUcsRUFBRSxNQUFNO2FB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QUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUMzQixDQUFDLENBQUE7WUFDSixDQUFDLENBQUM7WUFDRixJQUFJLEVBQUUsR0FBRyxDQUFDLGlCQUFpQjtTQUM1QixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGdldEFwcDxJQXBwT3B0aW9uPigpO1xuXG5QYWdlKHtcbiAgb25TaG93KCkge1xuICAgIGFwcC5zb3VuZChcInN0YXJ0XCIpO1xuICB9LFxuICBkYXRhOiB7XG4gICAgc2lkOiAnJyxcbiAgICBwaWQ6ICcnLFxuICAgIHF1ZXN0aW9uTnVtYmVyOjAsXG4gICAgcXVlc3Rpb25Db250ZW50OlwiXCIsXG4gICAgY2hvaWNlQTpcIlwiLFxuICAgIGNob2ljZUI6XCJcIixcbiAgICBsYXN0Q2hvaWNlOiAnJyxcbiAgICBsYXN0Q2hvaWNlU3RhdHVzOiAndW5rbm93bicsXG4gICAgTE9UVEVSWV9DT1JSRUNUX0NPVU5UOiAzXG4gIH0sXG4gIG5leHRRdWVzdGlvblBlbmRpbmc6IGZhbHNlLFxuICBuZXh0UXVlc3Rpb246IGZ1bmN0aW9uIChldnQ6IGFueSkge1xuICAgIGlmICh0aGlzLm5leHRRdWVzdGlvblBlbmRpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgY2hvaWNlID0gZXZ0LmN1cnJlbnRUYXJnZXQuaWQ7XG4gICAgdmFyIHBhZ2UgPSB0aGlzO1xuICAgIHRoaXMubmV4dFF1ZXN0aW9uUGVuZGluZyA9IHRydWU7XG4gICAgdGhpcy5zZXREYXRhKHsgbGFzdENob2ljZTogY2hvaWNlIH0pO1xuICAgIHd4LnJlcXVlc3Qoe1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICB1cmw6IGFwcC5BUElfRU5EUE9JTlQgKyAoXCIvc2Vzc2lvbi9cIiArIHRoaXMuZGF0YS5zaWQgKyBcIi9wcm9ibGVtL1wiICsgdGhpcy5kYXRhLnBpZCksXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGFuczogY2hvaWNlXG4gICAgICAgIH0sXG4gICAgICAgIGhlYWRlcjoge1xuICAgICAgICAgICAgJ1gtVXNlci1Ub2tlbic6IGFwcC5nbG9iYWxEYXRhLnRva2VuXG4gICAgICAgIH0sXG4gICAgICAgIHN1Y2Nlc3M6IGFwcC5oYW5kbGVSZXF1c3RGaW5pc2goZnVuY3Rpb24gKHJlczogYW55KSB7XG4gICAgICAgICAgICBjb25zdCBzZXNzaW9uID0gcmVzLmRhdGE7XG4gICAgICAgICAgICBpZiAoc2Vzc2lvbi5zdGF0dXMgPT0gJ2RvbmUnKSB7XG4gICAgICAgICAgICAgIGFwcC5zb3VuZChcImZhaWxlZFwiKVxuICAgICAgICAgICAgICAgIHBhZ2Uuc2V0RGF0YSh7IGxhc3RDaG9pY2VTdGF0dXM6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2UubmV4dFF1ZXN0aW9uUGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbi5jb3JyZWN0X2NvdW50ID49IHBhZ2UuZGF0YS5MT1RURVJZX0NPUlJFQ1RfQ09VTlQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB3eC5yZWRpcmVjdFRvKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYC4uL3N1Y2Nlc3Mvc3VjY2Vzcz9jb3JyZWN0X2NvdW50PSR7c2Vzc2lvbi5jb3JyZWN0X2NvdW50fSZzZXNzaW9uX2lkPSR7c2Vzc2lvbi5pZH1gLFxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHd4LnJlZGlyZWN0VG8oe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnLi4vZmFpbHVyZS9mYWlsdXJlJ1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBhcHAuc291bmQoXCJjb3JyZWN0XCIpXG4gICAgICAgICAgICAgICAgcGFnZS5zZXREYXRhKHsgbGFzdENob2ljZVN0YXR1czogJ2NvcnJlY3QnIH0pO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBwYWdlLm5leHRRdWVzdGlvblBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcGFnZS5zZXREYXRhKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpZDogc2Vzc2lvbi5wcm9ibGVtLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25Db250ZW50OiBzZXNzaW9uLnByb2JsZW0uYm9keSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uTnVtYmVyOiBzZXNzaW9uLnByb2JsZW0uaWR4LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hvaWNlQTogc2Vzc2lvbi5wcm9ibGVtLkEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaG9pY2VCOiBzZXNzaW9uLnByb2JsZW0uQixcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RDaG9pY2VTdGF0dXM6ICd1bmtub3duJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgZmFpbDogZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgcGFnZS5uZXh0UXVlc3Rpb25QZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBhcHAuaGFuZGxlUmVxdWVzdEZhaWwocmVzKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG9uTG9hZCgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICB3eC5yZXF1ZXN0KHtcbiAgICAgIHVybDogYXBwLkFQSV9FTkRQT0lOVCArIFwiL3Nlc3Npb25cIixcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXI6IHtcbiAgICAgICAgJ1gtVXNlci1Ub2tlbic6IGFwcC5nbG9iYWxEYXRhLnRva2VuXG4gICAgICB9LFxuICAgICAgc3VjY2VzczogYXBwLmhhbmRsZVJlcXVzdEZpbmlzaCgocmVzOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IHJlcy5kYXRhO1xuICAgICAgICBzZWxmLnNldERhdGEoe1xuICAgICAgICAgIHNpZDogc2Vzc2lvbi5pZCxcbiAgICAgICAgICBwaWQ6IHNlc3Npb24ucHJvYmxlbS5pZCxcbiAgICAgICAgICBxdWVzdGlvbkNvbnRlbnQ6IHNlc3Npb24ucHJvYmxlbS5ib2R5LFxuICAgICAgICAgIHF1ZXN0aW9uTnVtYmVyOiBzZXNzaW9uLnByb2JsZW0uaWR4LFxuICAgICAgICAgIGNob2ljZUE6IHNlc3Npb24ucHJvYmxlbS5BLFxuICAgICAgICAgIGNob2ljZUI6IHNlc3Npb24ucHJvYmxlbS5CXG4gICAgICAgIH0pXG4gICAgICB9KSxcbiAgICAgIGZhaWw6IGFwcC5oYW5kbGVSZXF1ZXN0RmFpbFxuICAgIH0pXG4gIH1cbn0pXG4iXX0=